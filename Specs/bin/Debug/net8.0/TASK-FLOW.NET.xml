<?xml version="1.0"?>
<doc>
    <assembly>
        <name>TASK-FLOW.NET</name>
    </assembly>
    <members>
        <member name="M:TASK_FLOW.NET.Auth.Controller.AuthController.RegisterUser(TASK_FLOW.NET.User.DTO.CreateUserDTO)">
            <summary>
            Register a new User
            </summary>
            <param name="body"></param>
            <returns>A new User registered</returns>
            <response code="201">User Registered</response>
            <response code="409">Conflict between repeat dates</response>
        </member>
        <member name="M:TASK_FLOW.NET.Auth.Controller.AuthController.VerifyEmailAccount(TASK_FLOW.NET.User.DTO.VerifyDTO)">
            <summary>
            Verify Email Address
            </summary>
            <param name="body"></param>
            <returns></returns>
        </member>
        <member name="M:TASK_FLOW.NET.Auth.Controller.AuthController.RecuperationAccount(TASK_FLOW.NET.User.DTO.RecuperationDTO)">
            <summary>
            Recuperation Account
            </summary>
            <param name="body"></param>
            <returns></returns>
        </member>
        <member name="M:TASK_FLOW.NET.Auth.Controller.AuthController.ForgetAccount(TASK_FLOW.NET.User.DTO.ForgetDTO)">
            <summary>
            Forget Account
            </summary>
            <param name="body"></param>
            <returns></returns>
        </member>
        <member name="M:TASK_FLOW.NET.Auth.Controller.AuthController.Login(TASK_FLOW.NET.Auth.DTO.AuthPropsDTO)">
            <summary>
            Login User 
            </summary>
            <param name="body"></param>
            <returns>User Token</returns>
            <response code="200">Ok</response>
            <response code="401">Unauthorized</response>
        </member>
        <member name="M:TASK_FLOW.NET.Auth.Controller.AuthController.GetProfile">
            <summary>
            Get Profile
            </summary>
            <returns>Return the Username of User</returns>
            <response code="200">Ok</response>
            <response code="401">Unauthorized</response>
        </member>
        <member name="M:TASK_FLOW.NET.Auth.Controller.AuthController.LogOut">
            <summary>
            Log Out
            </summary>
            <returns>200</returns>
            <response code="200">Ok</response>
            <response code="401">Unauthorized</response>
        </member>
        <member name="M:TASK_FLOW.NET.Auth.Controller.AuthController.UpdateEmail(System.Int32,TASK_FLOW.NET.User.DTO.NewEmailDTO)">
            <summary>
            Update Email
            </summary>
            <param name="id"></param>
            <param name="body"></param>
            <returns></returns>
        </member>
        <member name="M:TASK_FLOW.NET.Auth.Controller.AuthController.RemoveOwnAccount(System.Int32,TASK_FLOW.NET.User.DTO.PasswordDTO)">
            <summary>
            Remove own account
            </summary>
            <param name="id"></param>
            <param name="body"></param>
            <returns></returns>
        </member>
        <member name="M:TASK_FLOW.NET.Auth.Controller.AuthController.RefreshToken">
            <summary>
            Refresh Token
            </summary>
            <returns>200</returns>
            <response code = "200">Ok</response>
            <response code = "401">Unauthorized</response>
        </member>
        <member name="M:TASK_FLOW.NET.Auth.JWT.Service.TokenService.GetIdFromToken">
            <summary>
            Get Id from Token 
            </summary>
            <returns></returns>
            <exception cref="T:System.UnauthorizedAccessException"></exception>
        </member>
        <member name="M:TASK_FLOW.NET.Auth.JWT.Service.TokenService.GenerateToken(TASK_FLOW.NET.User.Model.UsersModel)">
            <summary>
            Generate Token
            </summary>
            <param name="user"></param>
            <returns></returns>
        </member>
        <member name="M:TASK_FLOW.NET.Auth.JWT.Service.TokenService.RefreshToken(TASK_FLOW.NET.User.Model.UsersModel)">
            <summary>
             Refresh Token 
            </summary>
            <param name="user"></param>
            <returns></returns>
        </member>
        <member name="M:TASK_FLOW.NET.Auth.JWT.Service.TokenService.ValidateToken(System.String)">
            <summary>
             Validate Token
            </summary>
            <param name="token"></param>
            <returns></returns>
        </member>
        <member name="M:TASK_FLOW.NET.Auth.JWT.Service.TokenService.isTokenExpireSoon(System.String)">
            <summary>
             is Token Expire Soon
            </summary>
            <param name="token"></param>
            <returns></returns>
        </member>
        <member name="M:TASK_FLOW.NET.Auth.JWT.Service.TokenService.CreateTokenPair(TASK_FLOW.NET.User.Model.UsersModel,System.DateTime,System.DateTime)">
            <summary>
             Create Token Pair Template
            </summary>
            <param name="user"></param>
            <param name="accessTokenExpired"></param>
            <param name="refreshTokenExpired"></param>
            <returns></returns>
        </member>
        <member name="M:TASK_FLOW.NET.Auth.JWT.Service.TokenService.CreateToken(System.Collections.Generic.IEnumerable{System.Security.Claims.Claim},Microsoft.IdentityModel.Tokens.SigningCredentials,System.DateTime)">
            <summary>
            Create Token Template
            </summary>
            <param name="claims"></param>
            <param name="signingCredentials"></param>
            <param name="expiration"></param>
            <returns></returns>
        </member>
        <member name="M:TASK_FLOW.NET.Auth.Service.AuthService.RegisterUser(TASK_FLOW.NET.User.DTO.CreateUserDTO)">
            <summary>
            Register User
            </summary>
            <param name="body"></param>
            <returns></returns>
            <exception cref="T:TASK_FLOW.NET.Utils.Exceptions.BadRequestException"></exception>
        </member>
        <member name="M:TASK_FLOW.NET.Auth.Service.AuthService.GenerateToken(TASK_FLOW.NET.User.Model.UsersModel)">
            <summary>
            Generate Token 
            </summary>
            <param name="body"></param>
            <returns></returns>
            <exception cref="T:System.UnauthorizedAccessException"></exception>
        </member>
        <member name="M:TASK_FLOW.NET.Auth.Service.AuthService.RefreshToken">
            <summary>
            Refresh Token
            </summary>
            <returns></returns>
        </member>
        <member name="M:TASK_FLOW.NET.Auth.Service.AuthService.GetProfile">
            <summary>
            Get Profile
            </summary>
            <returns></returns>
        </member>
        <member name="M:TASK_FLOW.NET.Auth.Service.AuthService.GetUserByCookie">
            <summary>
            Get User By Cookie 
            </summary>
            <returns></returns>
        </member>
        <member name="M:TASK_FLOW.NET.Auth.Service.AuthService.Logout">
            <summary>
            Log Out 
            </summary>
            <returns></returns>
        </member>
        <member name="M:TASK_FLOW.NET.Auth.Service.AuthService.UpdateEmail(System.Int32,TASK_FLOW.NET.User.DTO.NewEmailDTO)">
            <summary>
            Update Email
            </summary>
            <param name="id"></param>
            <param name="body"></param>
            <returns></returns>
            <exception cref="T:System.UnauthorizedAccessException"></exception>
        </member>
        <member name="M:TASK_FLOW.NET.Auth.Service.AuthService.RemoveOwnAccount(System.Int32,TASK_FLOW.NET.User.DTO.PasswordDTO)">
            <summary>
            Remove own account
            </summary>
            <param name="id"></param>
            <param name="body"></param>
            <returns></returns>
            <exception cref="T:System.UnauthorizedAccessException"></exception>
        </member>
        <member name="M:TASK_FLOW.NET.Auth.Service.AuthService.RefreshTokenValidate(System.String,System.Int32)">
            <summary>
            Refresh Token Validate 
            </summary>
            <param name="refreshToken"></param>
            <param name="id"></param>
            <returns></returns>
            <exception cref="T:System.UnauthorizedAccessException"></exception>
        </member>
        <member name="M:TASK_FLOW.NET.Auth.Service.AuthService.ValidationUser(TASK_FLOW.NET.Auth.DTO.AuthPropsDTO)">
            <summary>
             Validate User
            </summary>
            <param name="body"></param>
            <returns></returns>
            <exception cref="T:System.UnauthorizedAccessException"></exception>
        </member>
        <member name="M:TASK_FLOW.NET.Auth.Service.AuthService.VerifyAccount(TASK_FLOW.NET.User.DTO.VerifyDTO)">
            <summary>
            Verify Email 
            </summary>
            <param name="dto"></param>
            <returns></returns>
        </member>
        <member name="M:TASK_FLOW.NET.Auth.Service.AuthService.ForgetAccount(TASK_FLOW.NET.User.DTO.ForgetDTO)">
            <summary>
            Forget password
            </summary>
            <param name="dto"></param>
            <returns></returns>
        </member>
        <member name="M:TASK_FLOW.NET.Auth.Service.AuthService.RecuperatioAccount(TASK_FLOW.NET.User.DTO.RecuperationDTO)">
            <summary>
            Recuperation Account 
            </summary>
            <param name="dto"></param>
            <returns></returns>
        </member>
        <member name="T:TASK_FLOW.NET.Migrations.Init">
            <inheritdoc />
        </member>
        <member name="M:TASK_FLOW.NET.Migrations.Init.Up(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:TASK_FLOW.NET.Migrations.Init.Down(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:TASK_FLOW.NET.Migrations.Init.BuildTargetModel(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <inheritdoc />
        </member>
        <member name="M:TASK_FLOW.NET.Project.Controller.ProjectController.CreateProject(TASK_FLOW.NET.Project.DTO.CreateProjectDTO)">
            <summary>
            Create Project
            </summary>
            <param name="body"></param>
            <returns>Save a Project</returns>
            <response code= "200">Ok</response>
            <response code= "400">BadRequest</response>
        </member>
        <member name="M:TASK_FLOW.NET.Project.Controller.ProjectController.GetAllProject">
            <summary>
            Get All Project
            </summary>
            <returns>List of Project</returns>
            <response code= "200">Ok</response>
            <response code= "400">Bad Request</response>
        </member>
        <member name="M:TASK_FLOW.NET.Project.Controller.ProjectController.GetProjectById(System.Int32)">
            <summary>
            Get project by id
            </summary>
            <param name="id"></param>
            <returns>Return a project according his id</returns>
            <response code= "200">Ok</response>
            <response code= "404">Not found</response>
        </member>
        <member name="M:TASK_FLOW.NET.Project.Controller.ProjectController.UpdateProject(System.Int32,TASK_FLOW.NET.Project.DTO.UpdateProjectDTO)">
            <summary>
            Update Project
            </summary>
            <param name="id"></param>
            <param name="body"></param>
            <returns>Update a Project</returns>
            <response code= "204">No content</response>
            <response code= "404">Not found</response>
        </member>
        <member name="M:TASK_FLOW.NET.Project.Controller.ProjectController.DeleteProject(System.Int32)">
            <summary>
            Delete Project
            </summary>
            <param name="id"></param>
            <returns>Delete a project</returns>
            <response code= "204">No Content</response>
            <response code= "404">Not found</response>
        </member>
        <member name="M:TASK_FLOW.NET.Project.Repository.ProjectRepository.DeleteProjectAsync(TASK_FLOW.NET.Project.Model.ProjectModel)">
            <summary>
            Delete Project
            </summary>
            <param name="body"></param>
            <returns></returns>
        </member>
        <member name="M:TASK_FLOW.NET.Project.Repository.ProjectRepository.findByIdAsync(System.Int32)">
            <summary>
            Find by key value
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:TASK_FLOW.NET.Project.Repository.ProjectRepository.ListOfProjectAsync">
            <summary>
            List of Project
            </summary>
            <returns></returns>
        </member>
        <member name="M:TASK_FLOW.NET.Project.Repository.ProjectRepository.SaveProjectAsync(TASK_FLOW.NET.Project.Model.ProjectModel)">
            <summary>
            Save a Project
            </summary>
            <param name="body"></param>
            <returns></returns>
        </member>
        <member name="M:TASK_FLOW.NET.Project.Repository.ProjectRepository.UpdateProjectAsync(TASK_FLOW.NET.Project.Model.ProjectModel)">
            <summary>
            Update a Project
            </summary>
            <param name="body"></param>
            <returns></returns>
        </member>
        <member name="M:TASK_FLOW.NET.Project.Service.ProjectService.DeleteProject(System.Int32)">
            <summary>
            Delete Project
            </summary>
            <param name="id"></param>
            <returns></returns>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException"></exception>
        </member>
        <member name="M:TASK_FLOW.NET.Project.Service.ProjectService.GetProjectById(System.Int32)">
            <summary>
            Get One Register 
            </summary>
            <param name="id"></param>
            <returns></returns>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException"></exception>
        </member>
        <member name="M:TASK_FLOW.NET.Project.Service.ProjectService.FindProjectById(System.Int32)">
            <summary>
            Find user by id 
            </summary>
            <param name="id"></param>
            <returns></returns>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException"></exception>
        </member>
        <member name="M:TASK_FLOW.NET.Project.Service.ProjectService.ListOfProject">
            <summary>
            Get all register
            </summary>
            <returns></returns>
        </member>
        <member name="M:TASK_FLOW.NET.Project.Service.ProjectService.SaveProject(TASK_FLOW.NET.Project.DTO.CreateProjectDTO)">
            <summary>
            Save a new Project
            </summary>
            <param name="body"></param>
            <returns></returns>
        </member>
        <member name="M:TASK_FLOW.NET.Project.Service.ProjectService.UpdateProject(System.Int32,TASK_FLOW.NET.Project.DTO.UpdateProjectDTO)">
            <summary>
            Update a Project
            </summary>
            <param name="id"></param>
            <param name="body"></param>
            <returns></returns>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException"></exception>
        </member>
        <member name="M:TASK_FLOW.NET.Tasks.Controller.TaskController.CreateTask(System.Int32,TASK_FLOW.NET.Tasks.DTOs.CreateTaskDTO)">
            <summary>
            Create a new Task
            </summary>
            <param name="ProjectId"></param>
            <param name="body"></param>
            <returns>Save a task</returns>
            <response code = "201">Created</response>
            <response code = "400">Bad Request</response>
        </member>
        <member name="M:TASK_FLOW.NET.Tasks.Controller.TaskController.GetAllTAsk">
            <summary>
            Get all Tasks
            </summary>
            <returns>List of all tasks</returns>
            <response code = "200">Ok</response>
            <response code = "400">Bad Request</response>
        </member>
        <member name="M:TASK_FLOW.NET.Tasks.Controller.TaskController.GetTaskById(System.Int32)">
            <summary>
            Get task by id
            </summary>
            <param name="id"></param>
            <returns>Return a task according his Id number</returns>
            <response code = "200">Ok</response>
            <response code = "404">Not found</response>
        </member>
        <member name="M:TASK_FLOW.NET.Tasks.Controller.TaskController.UpdateTask(System.Int32,TASK_FLOW.NET.Tasks.DTOs.UpdateTaskDTO)">
            <summary>
            Update Task
            </summary>
            <param name="id"></param>
            <param name="body"></param>
            <returns>Nothing</returns>
            <response code = "204">No content</response>
            <response code = "404">Not found</response>
        </member>
        <member name="M:TASK_FLOW.NET.Tasks.Controller.TaskController.DeleteTask(System.Int32)">
            <summary>
            Delete task
            </summary>
            <param name="id"></param>
            <returns>No Content</returns>
            <response code = "204">No content</response>
            <response code = "404">Not found</response>
        </member>
        <member name="M:TASK_FLOW.NET.Tasks.Service.TaskService.CreateTask(System.Int32,TASK_FLOW.NET.Tasks.DTOs.CreateTaskDTO)">
            <summary>
            Create Task
            </summary>
            <param name="ProjectId"></param>
            <param name="body"></param>
            <returns></returns>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException"></exception>
        </member>
        <member name="M:TASK_FLOW.NET.Tasks.Service.TaskService.DeleteTask(System.Int32)">
            <summary>
            Delete Task
            </summary>
            <param name="id"></param>
            <returns></returns>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException"></exception>
        </member>
        <member name="M:TASK_FLOW.NET.Tasks.Service.TaskService.GetTaskById(System.Int32)">
            <summary>
            Get Task ById
            </summary>
            <param name="id"></param>
            <returns></returns>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException"></exception>
        </member>
        <member name="M:TASK_FLOW.NET.Tasks.Service.TaskService.ListOfAllTask">
            <summary>
            List of All Task
            </summary>
            <returns></returns>
        </member>
        <member name="M:TASK_FLOW.NET.Tasks.Service.TaskService.UpdateTask(System.Int32,TASK_FLOW.NET.Tasks.DTOs.UpdateTaskDTO)">
            <summary>
            Update Task
            </summary>
            <param name="id"></param>
            <param name="body"></param>
            <returns></returns>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException"></exception>
        </member>
        <member name="M:TASK_FLOW.NET.UserProject.Controllers.UserProjectController.RegisterUserAndProject(TASK_FLOW.NET.UserProject.DTO.UserProjectDTO)">
            <summary>
            Relation Project
            </summary>
            <returns>Relation between a User and a Project with a Access Level</returns>
            <response code="200">Relation finished successfully</response>
            <response code="400">Relation Faild</response>
        </member>
        <member name="M:TASK_FLOW.NET.UserProject.Controllers.UserProjectController.GetALLUP">
            <summary>
            Get All relations
            </summary>
            <returns></returns>
        </member>
        <member name="M:TASK_FLOW.NET.UserProject.Controllers.UserProjectController.GetUPbyId(System.Int32)">
            <summary>
            Get One relation
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:TASK_FLOW.NET.UserProject.Controllers.UserProjectController.UpdateUP(System.Int32,TASK_FLOW.NET.UserProject.DTO.UpdateUserProjectDTO)">
            <summary>
            Update own relatin
            </summary>
            <param name="id"></param>
            <param name="body"></param>
            <returns></returns>
        </member>
        <member name="M:TASK_FLOW.NET.UserProject.Repository.UserProjectRepository.AddChangeAsync(TASK_FLOW.NET.UserProject.Model.UserProjectModel)">
            <summary>
            Add Change Async 
            </summary>
            <param name="body"></param>
            <returns></returns>
        </member>
        <member name="M:TASK_FLOW.NET.UserProject.Repository.UserProjectRepository.findById(System.Int32)">
            <summary>
            Fin by ID
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:TASK_FLOW.NET.UserProject.Repository.UserProjectRepository.ListofAllAsync">
            <summary>
            List Of All Relations
            </summary>
            <returns></returns>
        </member>
        <member name="M:TASK_FLOW.NET.UserProject.Repository.UserProjectRepository.UpdateUPAsync(TASK_FLOW.NET.UserProject.Model.UserProjectModel)">
            <summary>
            Update Relations
            </summary>
            <param name="body"></param>
            <returns></returns>
        </member>
        <member name="M:TASK_FLOW.NET.UserProject.Services.UserProjectService.CreateUP(TASK_FLOW.NET.UserProject.DTO.UserProjectDTO)">
            <summary>
            Create a relation
            </summary>
            <param name="body"></param>
            <returns></returns>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException"></exception>
        </member>
        <member name="M:TASK_FLOW.NET.UserProject.Services.UserProjectService.GetUPbyID(System.Int32)">
            <summary>
            Find a relations for id 
            </summary>
            <param name="id"></param>
            <returns></returns>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException"></exception>
        </member>
        <member name="M:TASK_FLOW.NET.UserProject.Services.UserProjectService.ListOfAllUP">
            <summary>
            List of All Relations
            </summary>
            <returns></returns>
        </member>
        <member name="M:TASK_FLOW.NET.UserProject.Services.UserProjectService.UpdateUP(System.Int32,TASK_FLOW.NET.UserProject.DTO.UpdateUserProjectDTO)">
            <summary>
            Update Relations
            </summary>
            <param name="id"></param>
            <param name="body"></param>
            <returns></returns>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException"></exception>
        </member>
        <member name="M:TASK_FLOW.NET.User.Controller.UserController.GetAllUser">
            <summary>
            Get All User
            </summary>
            <returns>A List of All Users</returns>
            <response code="200">List of User</response>
            <response code="400">Bad Request</response>
        </member>
        <member name="M:TASK_FLOW.NET.User.Controller.UserController.GetUserById(System.Int32)">
            <summary>
            Get User by Id
            </summary>
            <param name="id"></param>
            <returns>Get a user according his Id</returns>
            <response code="200">User</response>
            <response code="404">User not Found</response>
        </member>
        <member name="M:TASK_FLOW.NET.User.Controller.UserController.UpdateUser(System.Int32,TASK_FLOW.NET.User.DTO.UpdateUserDTO)">
            <summary>
            Update User for creators roles
            </summary>
            <param name="id"></param>
            <param name="body"></param>
            <returns>Update a user according his id </returns>
            <response code="204">User Updated</response>
            <response code="404">User not found</response>
        </member>
        <member name="M:TASK_FLOW.NET.User.Controller.UserController.UpdateOwnAccount(System.Int32,TASK_FLOW.NET.User.DTO.UpdateOwnUserDTO)">
            <summary>
            Update own account
            </summary>
            <param name="id"></param>
            <param name="body"></param>
            <returns></returns>
        </member>
        <member name="M:TASK_FLOW.NET.User.Controller.UserController.UpdatePasswordUser(System.Int32,TASK_FLOW.NET.User.DTO.NewPasswordDTO)">
            <summary>
            Update Password
            </summary>
            <param name="id"></param>
            <param name="body"></param>
            <returns></returns>
        </member>
        <member name="M:TASK_FLOW.NET.User.Controller.UserController.UpdateRoles(System.Int32,TASK_FLOW.NET.User.DTO.RolesDTO)">
            <summary>
            Update Roles
            </summary>
            <param name="id"></param>
            <param name="body"></param>
            <returns></returns>
        </member>
        <member name="M:TASK_FLOW.NET.User.Controller.UserController.DelteUser(System.Int32)">
            <summary>
            Delte User
            </summary>
            <param name="id"></param>
            <returns>Delete a User according his Id</returns>
            <response code="204">User Deleted</response>
            <response code="404">User Not Found</response>
        </member>
        <member name="M:TASK_FLOW.NET.User.Repository.UserRepository.AddChangeAsync(TASK_FLOW.NET.User.Model.UsersModel)">
            <summary>
             Add Change Async 
            </summary>
            <param name="user"></param>
            <returns></returns>
        </member>
        <member name="M:TASK_FLOW.NET.User.Repository.UserRepository.ExistsByEmail(System.String)">
            <summary>
             Exist By Email
            </summary>
            <param name="email"></param>
            <returns></returns>
        </member>
        <member name="M:TASK_FLOW.NET.User.Repository.UserRepository.ExistsByUsername(System.String)">
            <summary>
            Exists By Username 
            </summary>
            <param name="username"></param>
            <returns></returns>
        </member>
        <member name="M:TASK_FLOW.NET.User.Repository.UserRepository.ToListAsync">
            <summary>
            To List Async 
            </summary>
            <returns></returns>
        </member>
        <member name="M:TASK_FLOW.NET.User.Repository.UserRepository.FindByIdAsync(System.Int32)">
            <summary>
            Find By Id Async 
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:TASK_FLOW.NET.User.Repository.UserRepository.FindByEmail(System.String)">
            <summary>
            Retun User model by Email adress
            </summary>
            <param name="email"></param>
            <returns></returns>
        </member>
        <member name="M:TASK_FLOW.NET.User.Repository.UserRepository.FindByKey(System.String,System.Object)">
            <summary>
            Find By Key
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:TASK_FLOW.NET.User.Repository.UserRepository.RemoveAsync(TASK_FLOW.NET.User.Model.UsersModel)">
            <summary>
            Remove Async 
            </summary>
            <param name="user"></param>
            <returns></returns>
        </member>
        <member name="M:TASK_FLOW.NET.User.Repository.UserRepository.UpdateAsync(TASK_FLOW.NET.User.Model.UsersModel)">
            <summary>
            Update Async 
            </summary>
            <param name="user"></param>
            <returns></returns>
        </member>
        <member name="M:TASK_FLOW.NET.User.Service.UserService.CreateUser(TASK_FLOW.NET.User.DTO.CreateUserDTO)">
            <summary>
            Save one Register
            </summary>
            <param name="body"></param>
            <returns></returns>
        </member>
        <member name="M:TASK_FLOW.NET.User.Service.UserService.DeleteUser(System.Int32)">
            <summary>
            Delete One register
            </summary>
            <param name="id"></param>
            <returns></returns>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException"></exception>
            <exception cref="T:System.UnauthorizedAccessException"></exception>
        </member>
        <member name="M:TASK_FLOW.NET.User.Service.UserService.RemoveOwnAccount(System.Int32,TASK_FLOW.NET.User.DTO.PasswordDTO)">
            <summary>
            Remove own account
            </summary>
            <param name="id"></param>
            <param name="body"></param>
            <returns></returns>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException"></exception>
            <exception cref="T:TASK_FLOW.NET.Utils.Exceptions.BadRequestException"></exception>
        </member>
        <member name="M:TASK_FLOW.NET.User.Service.UserService.FindByAuth(System.String,System.Object)">
            <summary>
            Fin by value key
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <returns></returns>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException"></exception>
        </member>
        <member name="M:TASK_FLOW.NET.User.Service.UserService.ToListAll">
            <summary>
            Get all register
            </summary>
            <returns></returns>
        </member>
        <member name="M:TASK_FLOW.NET.User.Service.UserService.GetById(System.Int32)">
            <summary>
            Get One Register
            </summary>
            <param name="id"></param>
            <returns></returns>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException"></exception>
        </member>
        <member name="M:TASK_FLOW.NET.User.Service.UserService.FindUserById(System.Int32)">
            <summary>
            Get user by id
            </summary>
            <param name="id"></param>
            <returns></returns>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException"></exception>
        </member>
        <member name="M:TASK_FLOW.NET.User.Service.UserService.UpdateToken(System.Int32,System.String)">
            <summary>
            Update RefrehsToken
            </summary>
            <param name="id"></param>
            <param name="RefreshToken"></param>
            <returns></returns>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException"></exception>
        </member>
        <member name="M:TASK_FLOW.NET.User.Service.UserService.UpdateUser(System.Int32,TASK_FLOW.NET.User.DTO.UpdateUserDTO)">
            <summary>
            Update one Register
            </summary>
            <param name="id"></param>
            <param name="body"></param>
            <returns></returns>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException"></exception>
        </member>
        <member name="M:TASK_FLOW.NET.User.Service.UserService.UpdateOwnUserAccount(System.Int32,TASK_FLOW.NET.User.DTO.UpdateOwnUserDTO)">
            <summary>
            Update User 
            </summary>
            <param name="id"></param>
            <param name="body"></param>
            <returns></returns>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException"></exception>
            <exception cref="T:TASK_FLOW.NET.Utils.Exceptions.BadRequestException"></exception>
        </member>
        <member name="M:TASK_FLOW.NET.User.Service.UserService.UpdateRolesUser(System.Int32,TASK_FLOW.NET.User.DTO.RolesDTO)">
            <summary>
            Update User Roles 
            </summary>
            <param name="id"></param>
            <param name="body"></param>
            <returns></returns>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException"></exception>
        </member>
        <member name="M:TASK_FLOW.NET.User.Service.UserService.UpdateEmail(System.Int32,TASK_FLOW.NET.User.DTO.NewEmailDTO)">
            <summary>
            Update Email
            </summary>
            <param name="id"></param>
            <param name="body"></param>
            <returns></returns>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException"></exception>
            <exception cref="T:TASK_FLOW.NET.Utils.Exceptions.BadRequestException"></exception>
        </member>
        <member name="M:TASK_FLOW.NET.User.Service.UserService.UpdatePassword(System.Int32,TASK_FLOW.NET.User.DTO.NewPasswordDTO)">
            <summary>
            Update Password
            </summary>
            <param name="id"></param>
            <param name="body"></param>
            <returns></returns>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException"></exception>
            <exception cref="T:TASK_FLOW.NET.Utils.Exceptions.BadRequestException"></exception>
            <exception cref="T:TASK_FLOW.NET.Utils.Exceptions.ConflictException"></exception>
        </member>
        <member name="M:TASK_FLOW.NET.User.Service.UserService.ForgetPassword(TASK_FLOW.NET.User.DTO.ForgetDTO)">
            <summary>
            Forget Password
            </summary>
            <param name="dto"></param>
            <returns></returns>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException"></exception>
        </member>
        <member name="M:TASK_FLOW.NET.User.Service.UserService.RecuperationAccount(TASK_FLOW.NET.User.DTO.RecuperationDTO)">
            <summary>
            Recuperation Account
            </summary>
            <param name="dto"></param>
            <returns></returns>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException"></exception>
            <exception cref="T:TASK_FLOW.NET.Utils.Exceptions.TooManyRequestExceptions"></exception>
            <exception cref="T:TASK_FLOW.NET.Utils.Exceptions.ForbiddentExceptions"></exception>
            <exception cref="T:TASK_FLOW.NET.Utils.Exceptions.ConflictException"></exception>
        </member>
        <member name="M:TASK_FLOW.NET.User.Service.UserService.MarkVerify(TASK_FLOW.NET.User.DTO.VerifyDTO)">
            <summary>
            Verify Email Adress
            </summary>
            <param name="dto"></param>
            <returns></returns>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException"></exception>
            <exception cref="T:TASK_FLOW.NET.Utils.Exceptions.ForbiddentExceptions"></exception>
            <exception cref="T:TASK_FLOW.NET.Utils.Exceptions.TooManyRequestExceptions"></exception>
        </member>
        <member name="M:TASK_FLOW.NET.User.Validations.UsersValidations.ValidateDuplicated(System.String)">
            <summary>
            ValidateUsernameDuplicated
            </summary>
            <param name="username"></param>
            <returns></returns>
        </member>
        <member name="M:TASK_FLOW.NET.User.Validations.UsersValidations.ValidateEmail(System.String)">
            <summary>
            Validate Email
            </summary>
            <param name="email"></param>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:TASK_FLOW.NET.User.Validations.UsersValidations.ValidatePassword(System.String)">
            <summary>
            Validate Password
            </summary>
            <param name="password"></param>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="T:TASK_FLOW.NET.Utils.Exceptions.ConflictException">
            <summary>
            409
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:TASK_FLOW.NET.Utils.Exceptions.ConflictException.#ctor(System.String)">
            <summary>
            409
            </summary>
            <param name="message"></param>
        </member>
        <member name="T:TASK_FLOW.NET.Utils.Exceptions.BadRequestException">
            <summary>
            400
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:TASK_FLOW.NET.Utils.Exceptions.BadRequestException.#ctor(System.String)">
            <summary>
            400
            </summary>
            <param name="message"></param>
        </member>
        <member name="T:TASK_FLOW.NET.Utils.Exceptions.ForbiddentExceptions">
            <summary>
            403
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:TASK_FLOW.NET.Utils.Exceptions.ForbiddentExceptions.#ctor(System.String)">
            <summary>
            403
            </summary>
            <param name="message"></param>
        </member>
        <member name="T:TASK_FLOW.NET.Utils.Exceptions.TooManyRequestExceptions">
            <summary>
            429
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:TASK_FLOW.NET.Utils.Exceptions.TooManyRequestExceptions.#ctor(System.String)">
            <summary>
            429
            </summary>
            <param name="message"></param>
        </member>
    </members>
</doc>
